#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) Brian Moe (2013-2014), Duncan Macleod (2014-)
#
# This file is part of LIGO CIS Core.
#
# LIGO CIS Core is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# LIGO CIS Core is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with LIGO CIS Core.  If not, see <http://www.gnu.org/licenses/>.

"""Download LIGO data acquisition INI files from a given source.

This script downloads all INI files listed by the Apache directory
listing retrieved from the given URL.
"""

from __future__ import print_function
import os
import logging
import re
from argparse import ArgumentParser

from bs4 import BeautifulSoup

import ligo.org

from cis.server import version

__author__ = 'Duncan Macleod <duncan.macleod@ligo.org>'
__version__ = version.version

DAQURLS = [
    'https://llocds.ligo-la.caltech.edu/data/chans/daq/',
    'https://lhocds.ligo-wa.caltech.edu/exports/running_config/h1/daqfiles/',
]

parser = ArgumentParser(description=__doc__)
parser.add_argument('-V', '--version', action='version', version=__version__)
parser.add_argument(
    'URL', nargs='*', default=DAQURLS,
    help='URL to query for DAQ INI files, default: %(default)s')
parser.add_argument(
    '-o', '--output-dir', default='daq',
    help='output directory for INI files, default: %(default)s')
parser.add_argument(
    '-k', '--keytab', default=os.getenv('KRB5_KTNAME', None),
    help='path to kerberos keytab file, default: %(default)s')
parser.add_argument(
    '-v', '--verbose', action='count', default=0,
    help='increase verbose output, may be given multiple times')
args = parser.parse_args()
args.verbose = max(5 - args.verbose, 0) * 10

# create log
log = logging.Logger('daq', level=args.verbose)
log.addHandler(logging.StreamHandler())
log.info('Beginning operation')
log.debug('Will check the following URLS\n%s' % '\n'.join(args.URL))

# make output directory
if not os.path.isdir(args.output_dir):
    os.makedirs(args.output_dir)
    log.debug('Created output directory %s' % args.output_dir)

# get kerberos credentials
ligo.org.kinit(keytab=args.keytab)
log.debug('Kerberos credentials verified')

# loop over URLS
reini = re.compile('ini\Z')
# channels = set()
for url in args.URL:
    f = ligo.org.request(url)
    log.debug('Successfully queried %s' % url)
    soup = BeautifulSoup(f)
    for a in soup.find_all('a', text=reini):
        ini = a.attrs['href']
        new = os.path.join(args.output_dir, ini)
        content = ligo.org.request(os.path.join(url, ini))
        with open(new, 'w') as inif:
            print(content.read(), file=inif)
        log.debug('    Retrieved and stored %s' % ini)
        # check for duplicates
        # for line in content:
        #     mo = re_sect.match(line)
        #     if mo:
        #         channel = mo.group('header')
        #         if channel in channels:
        #             log.warning('    Duplicate channels found in %s' % ini)
        #             #mv new fail/
        #         else:
        #             channels.add(channel)
    log.info('%s complete' % url)

log.info('All done')
